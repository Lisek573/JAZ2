package mmorpg.services;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import javax.enterprise.context.ApplicationScoped;

import mmorpg.project.*;
import mmorpg.project.Character;


@ApplicationScoped
public class CharacterDBManager {

	private Connection conn;
	private Statement stmt;
	private PreparedStatement addCharacterStmt;
	private PreparedStatement getCharacterStmt;
	private PreparedStatement deleteAllCharacterStmt;
	private PreparedStatement findCharacterByNameStmt;
	private PreparedStatement findCharacterByTypeStmt;
	private PreparedStatement deleteCharacterStmt;
	
	List<Integer> listID = new ArrayList<Integer>();
	
	public CharacterDBManager() 
	{
		try 
		{
			
			conn = DriverManager
					.getConnection("jdbc:hsqldb:hsql://localhost/workdb");

			stmt = conn.createStatement();
			boolean CharacterTableExists = false;

			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);

			while (rs.next()) 
			{
				if ("Character".equalsIgnoreCase(rs.getString("TABLE_NAME"))) 
				{
					CharacterTableExists = true;
					break;
				}
			}

			if (!CharacterTableExists) 
			{
				stmt.executeUpdate("CREATE TABLE Character(id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,name varchar(40), jobClass varchar(20), level integer)");
			}


			addCharacterStmt = conn.prepareStatement("INSERT INTO Character (name, jobClass, level) VALUES (?, ?, ?)");

			getCharacterStmt = conn.prepareStatement("SELECT * FROM Character");
			
			deleteAllCharacterStmt = conn.prepareStatement("DELETE FROM Character");
			
			findCharacterByNameStmt = conn.prepareStatement("SELECT id FROM Character WHERE name = ?");
			
			findCharacterByTypeStmt = conn.prepareStatement("SELECT id FROM Character WHERE jobClass = ?");
			
			deleteCharacterStmt = conn.prepareStatement("DELETE FROM Character WHERE id = ?");
		} 
		catch (SQLException e) 
		{

			e.printStackTrace();
		}
	}

	public void addCharacter(Character Character) 
	{
		try 
		{
			addCharacterStmt.setString(1, Character.getName());
			addCharacterStmt.setString(2, Character.getJobClass().toString());
			addCharacterStmt.setInt(3, Character.getLevel());
			addCharacterStmt.executeUpdate();
		} 
		catch (SQLException e) 
		{

			e.printStackTrace();
		}

	}

	public List<Character> getAllCharacters() 
	{
		List<Character> Characters = new ArrayList<Character>();
		try 
		{
			ResultSet rs = getCharacterStmt.executeQuery();
			while (rs.next()) 
			{
				JobClass jobClass = null;
				if (rs.getString("jobClass").equals("Knight"))
					jobClass = JobClass.Knight;
				if (rs.getString("jobClass").equals("Priest"))
					jobClass = JobClass.Priest;
				if (rs.getString("jobClass").equals("Hunter"))
					jobClass = JobClass.Hunter;
				if (rs.getString("jobClass").equals("Monk"))
					jobClass = JobClass.Monk;
				if (rs.getString("jobClass").equals("Merchant"))
					jobClass = JobClass.Merchant;
				if (rs.getString("jobClass").equals("Sniper"))
					jobClass = JobClass.Sniper;
				
				Characters.add(new Character(rs.getString("name"),jobClass,rs.getInt("level")));
			}

		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		return Characters;
	}

	public void deleteAllCharacter() 
	{
		try 
		{
			deleteAllCharacterStmt.executeUpdate();
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}
	
	public List<Integer> findCharacterByName(String name)
	{
		try 
		{
			List<Integer> result = new ArrayList<Integer>();
			findCharacterByNameStmt.setString(1, name);
			ResultSet rs = findCharacterByNameStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));	
			return result;
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		return null;
	}
	
	public List<Integer> findCharacterByType(JobClass jobClass)
	{
		try 
		{
			List<Integer> result = new ArrayList<Integer>();
			findCharacterByTypeStmt.setString(1, jobClass.toString());
			ResultSet rs = findCharacterByTypeStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		return null;
	}
	
	public void deleteCharacter(List<Integer> list)
	{
		try 
		{
			for (Integer id : list)
			{
				deleteCharacterStmt.setInt(1, id);
				deleteCharacterStmt.executeUpdate();
			}
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}
	

	


}
