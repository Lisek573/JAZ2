package mmorpg.services;

import java.io.IOException;
import java.sql.*;
import java.sql.Date;
import java.util.*;

import mmorpg.project.*;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class AccountDBManager {
	
	List<Integer> listID = new ArrayList<Integer>();

	private Connection conn;
	private Statement stmt;
	private PreparedStatement addAccountStmt;
	private PreparedStatement getAccountStmt;
	private PreparedStatement deleteAllAccountStmt;
	private PreparedStatement deleteAccountStmt;
	private PreparedStatement findAccountStmt;

	public AccountDBManager() 
	{
		try 
		{
		
			conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");

			stmt = conn.createStatement();
			boolean accountTableExists = false;

			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);

			while (rs.next()) 
			{
				if ("Account".equalsIgnoreCase(rs.getString("TABLE_NAME"))) 
				{
					accountTableExists = true;
					break;
				}
			}

			if (!accountTableExists) 
			{
				stmt.executeUpdate("CREATE TABLE account(id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,name varchar(20), dateOfCreate date)");
			}

			addAccountStmt = conn.prepareStatement("INSERT INTO account (name,dateofCreate) VALUES (?,?)");

			getAccountStmt = conn.prepareStatement("SELECT * FROM account");
			
			deleteAllAccountStmt = conn.prepareStatement("DELETE FROM account");
			
			findAccountStmt = conn.prepareStatement("SELECT id FROM account WHERE name = ?");
			
			deleteAccountStmt = conn.prepareStatement("DELETE FROM account WHERE id = ?");

		} 
		catch (SQLException e) 
		{

			e.printStackTrace();
		}
	}

	@SuppressWarnings("deprecation")
	public void addAccount(Account account) 
	{
		try 
		{
			java.sql.Date date = new  java.sql.Date(account.getDateOfCreate().getTime());
			addAccountStmt.setString(1, account.getName());
			addAccountStmt.setDate(2, date);
			addAccountStmt.executeUpdate();
		} 
		catch (SQLException e) 
		{

			e.printStackTrace();
		}

	}

	public List<Account> getAllAccounts() 
	{
		List<Account> accounts = new ArrayList<Account>();

		try 
		{
			ResultSet rs = getAccountStmt.executeQuery();

			while (rs.next()) 
			{
				accounts.add(new Account(rs.getString("name"), rs.getDate("dateofCreate")));
			}

		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}

		return accounts;
	}
	
	public void deleteAllAccount() 
	{
		try 
		{
			deleteAllAccountStmt.executeUpdate();
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}
	
	public List<Integer> findAccountByName(String name)
	{
		try 
		{
			List<Integer> result = new ArrayList<Integer>();
			findAccountStmt.setString(1, name);
			ResultSet rs = findAccountStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		return null;
	}
	
	public void deleteAccount(List<Integer> list)
	{
		try 
		{
			for (Integer id : list)
			{
				deleteAccountStmt.setInt(1, id);
				deleteAccountStmt.executeUpdate();
			}
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}

}
